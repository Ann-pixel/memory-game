{"version":3,"sources":["Cards.js","sounds/a.mp3","sounds/b.mp3","sounds/c.mp3","sounds/d.mp3","sounds/e.mp3","sounds/f.mp3","sounds/g.mp3","sounds/h.mp3","sounds/whale.mp3","utils.js","gameOver.js","App.js","index.js"],"names":["Cards","props","onClick","className","color","flash","timeout","s","Promise","resolve","setTimeout","whaleSound","Audio","whale","allSounds","aS","bS","cS","dS","eS","fS","gS","hS","GameOver","score","reset","App","colorList","initPlay","isDisplay","displayPattern","isUserPlay","userPattern","useState","isOn","setIsOn","game","setGame","flashColor","setFlashColor","isGameOver","setIsGameOver","a","i","length","playSound","copyColors","reverse","copyUserPattern","lastColor","pop","play","idx","indexOf","useEffect","newColor","Math","floor","random","push","displayColors","map","v","cardClickHandle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.344e6bc8.chunk.js","sourcesContent":["import \"./Cards.css\";\r\nexport default function Cards(props) {\r\n  return (\r\n    <div\r\n      onClick={props.onClick}\r\n      className={`color-card ${props.color} ${props.flash ? \"flash\" : \"\"}`}\r\n    ></div>\r\n  );\r\n}\r\n","export default __webpack_public_path__ + \"static/media/a.2d701cb1.mp3\";","export default __webpack_public_path__ + \"static/media/b.d90b5485.mp3\";","export default __webpack_public_path__ + \"static/media/c.2f4c02be.mp3\";","export default __webpack_public_path__ + \"static/media/d.58bfaa28.mp3\";","export default __webpack_public_path__ + \"static/media/e.cd503cd3.mp3\";","export default __webpack_public_path__ + \"static/media/f.8aee37b9.mp3\";","export default __webpack_public_path__ + \"static/media/g.3979f430.mp3\";","export default __webpack_public_path__ + \"static/media/h.ac16f5e2.mp3\";","export default __webpack_public_path__ + \"static/media/whale.4ae1905f.mp3\";","import aS from \"./sounds/a.mp3\";\r\nimport bS from \"./sounds/b.mp3\";\r\nimport cS from \"./sounds/c.mp3\";\r\nimport dS from \"./sounds/d.mp3\";\r\nimport eS from \"./sounds/e.mp3\";\r\nimport fS from \"./sounds/f.mp3\";\r\nimport gS from \"./sounds/g.mp3\";\r\nimport hS from \"./sounds/h.mp3\";\r\nimport whale from \"./sounds/whale.mp3\";\r\n\r\nexport function timeout(s) {\r\n  return new Promise((resolve) => setTimeout(resolve, s * 1000));\r\n}\r\nexport const whaleSound = new Audio(whale);\r\n\r\nconst a = new Audio(aS);\r\nconst b = new Audio(bS);\r\nconst c = new Audio(cS);\r\nconst d = new Audio(dS);\r\nconst e = new Audio(eS);\r\nconst f = new Audio(fS);\r\nconst g = new Audio(gS);\r\nconst h = new Audio(hS);\r\n\r\nexport const allSounds = [a, b, c, d, e, f, g, h];\r\n","import \"./gameOver.css\";\r\nexport default function GameOver(props) {\r\n  return (\r\n    <div className=\"overlay\">\r\n      <div className=\"game-over\">\r\n        <h3>Game over</h3>\r\n        <h4>score: {props.score}</h4>\r\n        <p>Click to reset the game</p>\r\n        <div className=\"reset\" onClick={props.reset}>\r\n          Reset\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Cards from \"./Cards\";\nimport { timeout } from \"./utils\";\nimport { allSounds, whaleSound } from \"./utils\";\nimport GameOver from \"./gameOver\";\nfunction App() {\n  const colorList = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\n  const initPlay = {\n    isDisplay: false,\n    displayPattern: [],\n    score: 0,\n    isUserPlay: false,\n    userPattern: [],\n  };\n  const [isOn, setIsOn] = useState(false);\n  const [game, setGame] = useState(initPlay);\n  const [flashColor, setFlashColor] = useState(\"\");\n  const [isGameOver, setIsGameOver] = useState(false);\n  // USER CLICKS START OR REPLAY\n  function startHandle() {\n    setIsOn(true);\n  }\n  function restartGame() {\n    setIsGameOver(false);\n    setGame(initPlay);\n    setIsOn(false);\n  }\n  // play.isOn changed. Change isDisplay.\n  useEffect(() => {\n    if (isOn) {\n      setGame({ ...initPlay, isDisplay: true });\n    }\n    // eslint-disable-next-line\n  }, [isOn]);\n\n  // isDisplay is true. Add a color to display pattern.\n  useEffect(() => {\n    if (isOn && game.isDisplay) {\n      let newColor = colorList[Math.floor(Math.random() * 8)];\n      const copyColors = [...game.displayPattern];\n      copyColors.push(newColor);\n      setGame({ ...game, displayPattern: copyColors });\n    }\n    // eslint-disable-next-line\n  }, [isOn, game.isDisplay]);\n\n  // display all colors from pattern\n  useEffect(() => {\n    if (isOn && game.isDisplay && game.displayPattern.length) {\n      displayColors();\n    }\n    // eslint-disable-next-line\n  }, [isOn, game.isDisplay, game.displayPattern.length]);\n\n  async function displayColors() {\n    await timeout(0.3);\n    for (let i = 0; i < game.displayPattern.length; i++) {\n      setFlashColor(game.displayPattern[i]);\n      playSound(game.displayPattern[i]);\n      await timeout(0.3);\n      setFlashColor(\"\");\n      await timeout(0.5);\n\n      if (i === game.displayPattern.length - 1) {\n        const copyColors = [...game.displayPattern];\n        setGame({\n          ...game,\n          isDisplay: false,\n          isUserPlay: true,\n          userPattern: copyColors.reverse(),\n        });\n      }\n    }\n  }\n  // perform a check for the users pattern\n  //\n  async function cardClickHandle(color) {\n    if (!game.isDisplay && game.isUserPlay) {\n      const copyUserPattern = [...game.userPattern];\n      const lastColor = copyUserPattern.pop();\n      setFlashColor(color);\n      playSound(color);\n      if (color === lastColor) {\n        if (copyUserPattern.length) {\n          setGame({ ...game, userPattern: copyUserPattern });\n        } else {\n          await timeout(0.5);\n          setGame({\n            ...game,\n            isDisplay: true,\n            isUserPlay: false,\n            score: game.displayPattern.length,\n            userPattern: [],\n          });\n        }\n      } else {\n        await timeout(0.5);\n        setGame({\n          ...initPlay,\n          score: game.displayPattern.length,\n        });\n        whaleSound.play();\n        setIsGameOver(true);\n      }\n      await timeout(0.1);\n      setFlashColor(\"\");\n    }\n  }\n  function playSound(color) {\n    let idx = colorList.indexOf(color);\n    allSounds[idx].play();\n  }\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <div className=\"\">Test your memory!</div>\n        <div className=\"\">----Hit START----</div>\n      </div>\n      <div className=\"card-wrapper\">\n        {colorList &&\n          colorList.map((v, i) => (\n            <Cards\n              key={v}\n              onClick={() => {\n                cardClickHandle(v);\n              }}\n              flash={flashColor === v}\n              color={v}\n            />\n          ))}\n        {!isOn && !game.score && (\n          <div className=\"btn\" onClick={startHandle}>\n            Start\n          </div>\n        )}\n        {isOn && (game.isDisplay || game.isUserPlay) && (\n          <div className=\"btn\">{game.score}</div>\n        )}\n      </div>\n\n      {isGameOver && <GameOver score={game.score} reset={restartGame} />}\n      <div className=\"footer\">Made with ♥ by Gauri</div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}